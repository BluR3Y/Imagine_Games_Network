"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import dotenv_values

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = os.environ.get("PROJECT_ENV")
environment_variables = os.environ if env == "production" else dotenv_values(str(BASE_DIR.parent) + "/env/backend/.env.development")

# ScrapeOps Credentials (Fake Browser Header API)
SCRAPEOPS_API_KEY = environment_variables.get("SCRAPEOPS_API_KEY")
SCRAPEOPS_FAKE_USER_AGENT_ENDPOINT = environment_variables.get("SCRAPEOPS_FAKE_USER_AGENT_ENDPOINT")
SCRAPEOPS_FAKE_USER_AGENT_ENABLED = environment_variables.get("SCRAPEOPS_FAKE_USER_AGENT_ENABLED")
SCRAPEOPS_NUM_RESULTS = environment_variables.get("SCRAPEOPS_NUM_RESULTS")

# Bright Data Credentials (Rotating/Backconnect Proxies)
PROXY_USER = environment_variables.get("PROXY_USER")
PROXY_PASSWORD = environment_variables.get("PROXY_PASSWORD")
PROXY_PROTOCOL = environment_variables.get("PROXY_PROTOCOL")
PROXY_ENDPOINT = environment_variables.get("PROXY_ENDPOINT")
PROXY_PORT = environment_variables.get("PROXY_PORT")

# Postgres Database Credentials
POSTGRES_HOST = environment_variables.get("POSTGRES_HOST")
POSTGRES_PORT = environment_variables.get("POSTGRES_PORT")
POSTGRES_DATABASE = environment_variables.get("POSTGRES_DATABASE")
POSTGRES_ACCESS_USER = environment_variables.get("POSTGRES_ACCESS_USER")
POSTGRES_ACCESS_PASSWORD = environment_variables.get("POSTGRES_ACCESS_PASSWORD")

# Redis Database Credentials
REDIS_HOST = environment_variables.get('REDIS_HOST')
REDIS_PORT = environment_variables.get('REDIS_PORT')
REDIS_ACCESS_PASSWORD = environment_variables.get('REDIS_ACCESS_PASSWORD')

# AWS Credentials
AWS_ACCESS_KEY = environment_variables.get("AWS_ACCESS_KEY")
AWS_SECRET_KEY = environment_variables.get("AWS_SECRET_KEY")
AWS_BUCKET = environment_variables.get("AWS_BUCKET")
AWS_REGION = environment_variables.get("AWS_REGION")
AWS_ENDPOINT = environment_variables.get("AWS_ENDPOINT")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h%rh97)a5fn7=!)t@&+m9pktqjtm!!^i^8qq$x)$k1gg-yiw=&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_rq'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': POSTGRES_DATABASE,
        'USER': POSTGRES_ACCESS_USER,
        'PASSWORD': POSTGRES_ACCESS_PASSWORD,
        'HOST': POSTGRES_HOST,
        'PORT': POSTGRES_PORT
    }
}

QUEUE_CONFIGURATION = {
    'HOST': REDIS_HOST,
    'PORT': REDIS_PORT,
    'PASSWORD': REDIS_ACCESS_PASSWORD,
    'DB': 0,
    'DEFAULT_TIMEOUT': 500
}
RQ_QUEUES = {
    'high': QUEUE_CONFIGURATION,
    'medium': QUEUE_CONFIGURATION,
    'low': QUEUE_CONFIGURATION
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
